@rendermode InteractiveServer

@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject IChatCompletionService ChatCompletionService

@if (!string.IsNullOrEmpty(this.whatAmI))
{
    <input type="checkbox" id="check" @onclick="this.ClearChat" />
    <label class="chat-btn" for="check">
        <i class="fa fa-commenting-o comment"></i>
        <i class="fa fa-close close"></i>
    </label>
    <div class="wrapper">
        <div class="container">
            <div class="d-flex justify-content-center">
                <div class="card" id="chat1" style="border-radius: 15px;">
                    <div class="card-header d-flex justify-content-between align-items-center p-3 bg-info text-white border-bottom-0" style="border-top-left-radius: 15px; border-top-right-radius: 15px;">
                        <p class="mb-0 fw-bold">Chat with Azure OpenAI</p>
                    </div>
                    <div class="card-body" id="messages-container" style="height: 500px; overflow-y: auto; background-color: #eee; border: 2px solid #0CCAF0">
                        @foreach (string chatMessage in this.messages)
                        {
                            @if (chatMessage.Contains("|AI|"))
                            {
                                <div class="d-flex flex-row justify-content-start mb-4">
                                    <div class="avatarSticky">
                                        <img src="openai-chatgpt-logo-icon.webp" alt="avatar 1" style="width: 45px; height: 100%;">
                                    </div>
                                    <div class="p-3 ms-3" style="border-radius: 15px; background-color: rgba(57, 192, 237,.2);">
                                        @((MarkupString)chatMessage.Replace("|AI|", string.Empty))
                                    </div>
                                </div>
                                continue;
                            }

                            <div class="d-flex flex-row justify-content-end mb-4">
                                <div class="p-3 me-3 border" style="border-radius: 15px; background-color: #fbfbfb;">
                                    @((MarkupString)chatMessage)
                                </div>
                                <div class="avatarSticky">
                                    <img src="user-icon.png" alt="avatar 1" style="width: 45px; height: 100%;">
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(this.htmlStreamingResponse))
                        {
                            <div class="d-flex flex-row justify-content-start mb-4">
                                <div class="avatarSticky">
                                    <img src="openai-chatgpt-logo-icon-progress.webp" alt="avatar 1" style="width: 45px; height: 100%;">
                                </div>
                                <div class="p-3 ms-3" style="border-radius: 15px; background-color: #39c8ed; color: #ffff;">
                                    @((MarkupString)this.htmlStreamingResponse)
                                </div>
                            </div>
                        }
                    </div>
                    <div class="card-footer bg-info text-white" style="border-bottom-left-radius: 15px; border-bottom-right-radius: 15px;">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Prompt..." @bind="this.message" id="Message" @onkeydown="this.EnterCheckMessage" disabled=@(!string.IsNullOrEmpty(this.htmlStreamingResponse)) />
                            <span class="input-group-btn">
                                <button class="btn btn-default" @onclick="this.SendChat" disabled=@(!string.IsNullOrEmpty(this.htmlStreamingResponse))>
                                    <i class="fa fa-paper-plane"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<HeadContent>
    <script>
        function scrollToBottom() {
            var objDiv = document.getElementById("messages-container");
            objDiv.scrollTop = objDiv.scrollHeight;
        }

        function focusOnMessage() {
            var message = document.getElementById("Message");
            if (message != null) {
                setTimeout(() => message.focus(), 100);
            }
        }
    </script>
</HeadContent>

@code {
    private string whatAmI = string.Empty;
    private string message = string.Empty;
    private string htmlStreamingResponse = string.Empty;
    private readonly ChatHistory chatHistory = [];
    private readonly List<string> messages = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.whatAmI = await this.LocalStorage.GetItemAsync<string>("whatAmI") ?? string.Empty;
            this.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EnterCheckMessage(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await this.SendChat();
        }
    }

    private async Task SendChat()
    {
        if (string.IsNullOrEmpty(this.message))
        {
            await this.JsRuntime.InvokeVoidAsync("focusOnMessage");
            return;
        }

        this.htmlStreamingResponse = "<i class=\"fa fa-ellipsis-h\"></i>";
        this.chatHistory.AddUserMessage(this.message);
        this.messages.Add(this.message);
        this.message = string.Empty;
        string streamingResponse = string.Empty;
        await foreach (StreamingChatMessageContent response in this.ChatCompletionService.GetStreamingChatMessageContentsAsync(this.chatHistory))
        {
            streamingResponse += response;
            this.htmlStreamingResponse = Markdig.Markdown.ToHtml($"{streamingResponse} <i class=\"fa fa-ellipsis-h\"></i>");
            this.StateHasChanged();
            await this.JsRuntime.InvokeVoidAsync("scrollToBottom");
            await Task.Delay(100);
        }

        this.chatHistory.AddAssistantMessage(streamingResponse);
        this.messages.Add($"{Markdig.Markdown.ToHtml($"|AI|{streamingResponse}")}");
        this.htmlStreamingResponse = string.Empty;
        await this.JsRuntime.InvokeVoidAsync("focusOnMessage");
    }

    private async Task ClearChat()
    {
        this.messages.Clear();
        this.chatHistory.Clear();
        this.chatHistory.AddSystemMessage(this.whatAmI);
        this.htmlStreamingResponse = string.Empty;
        this.message = string.Empty;
        this.messages.Add("|AI|Welcome to the AI chatbot! I am an AI chatbot trained by OpenAI.");
        this.StateHasChanged();
        await this.JsRuntime.InvokeVoidAsync("focusOnMessage");
    }
}
